name: Azure SQL Query Runner
on: [workflow_dispatch]

env:
  SQL_SERVER: emi-qa-numberstation-we-svm.database.windows.net
  DATABASE_NAME: GenAIStatistics
  SQL_QUERY: "SELECT TOP 10 * FROM dbo.Persons"

jobs:
  query-database:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run az commands
        run: |
          az account show
          az group list
          
      - name: Install ODBC Driver
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft*.list
          sudo rm -f /usr/share/keyrings/microsoft*.gpg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev

      - name: Setup Python
        run: |
          python -m pip install --upgrade pip
          pip install pyodbc pandas
          pip install msal

      - name: Get Access Token
        run: |
          TOKEN=$(az account get-access-token --resource https://database.windows.net --query accessToken -o tsv)
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Execute Query
        env:
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        run: |
          python3 <<'EOF'
          import os
          import pyodbc
          import msal
          
          # Read configuration from environment variables
          TENANT_ID = os.environ.get("AZURE_TENANT_ID")
          CLIENT_ID = os.environ.get("AZURE_CLIENT_ID")
          SQL_SERVER = os.environ.get("SQL_SERVER")
          DATABASE = os.environ.get("DATABASE_NAME")
          AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
          SCOPE = ["https://database.windows.net//.default"]

          # Get Access Token via Device Code Flow
          def get_access_token():
              app = msal.PublicClientApplication(CLIENT_ID, authority=AUTHORITY)
              flow = app.initiate_device_flow(scopes=SCOPE)
              if "message" in flow:
                  print(flow["message"])  # Prompt user to authenticate using device code
              else:
                  raise Exception("Device Flow authentication failed")
              token_response = app.acquire_token_by_device_flow(flow)
              if "access_token" in token_response:
                  return token_response["access_token"]
              else:
                  raise Exception(f"Could not acquire token: {token_response.get('error_description', token_response)}")
          
          # Connect to Azure SQL Server using ActiveDirectoryAccessToken authentication
          def connect_to_azure_sql():
              access_token = get_access_token()
              connection_string = (
                  "DRIVER={ODBC Driver 17 for SQL Server};"
                  f"SERVER={SQL_SERVER};"
                  f"DATABASE={DATABASE};"
                  "Authentication=ActiveDirectoryAccessToken;"
              )
              # The ODBC attribute for passing the access token is 1256
              conn = pyodbc.connect(connection_string, attrs_before={1256: access_token})
              return conn
          
          # Execute the test query
          try:
              conn = connect_to_azure_sql()
              cursor = conn.cursor()
              cursor.execute("SELECT TOP 10 * FROM dbo.Persons")
              row = cursor.fetchone()
              print("Connected successfully! First row:", row)
              conn.close()
          except Exception as e:
              print("Connection failed:", e)
              
          EOF

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: sql-results
          path: results.csv
