name: Connect to Azure SQL with Access Token
on: [workflow_dispatch]

env:
  SQL_SERVER: emi-qa-numberstation-we-svm.database.windows.net
  DATABASE_NAME: GenAIStatistics
  SQL_QUERY: "SELECT TOP 10 * FROM dbo.Persons"

jobs:
  connect-to-sql:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for OIDC
      contents: read

    steps:
    - name: Azure Login (OIDC)
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install ODBC Driver
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft*.list
        sudo rm -f /usr/share/keyrings/microsoft*.gpg
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev
        
    - name: Get Access Token
      run: |
        # Retrieve token for Azure SQL Database
        TOKEN=$(az account get-access-token --resource https://database.windows.net --query accessToken -o tsv)
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV
        echo "TOKEN_LENGTH=${#TOKEN}" >> $GITHUB_ENV
        
    - name: Setup Python
      run: |
        sudo apt-get install -y python3-pip
        pip install pyodbc msal azure-identity
        
    - name: Execute SQL Query
      run: |
        python3 -c "
        import pyodbc
        from azure.identity import DefaultAzureCredential
        import struct
        from itertools import chain, repeat
        
        def bytes2mswin_bstr(value: bytes) -> bytes:
            \"\"\"Convert a sequence of bytes into a (MS-Windows) BSTR (as bytes).
        
            See https://github.com/mkleehammer/pyodbc/issues/228#issuecomment-319190980
            for the original code.  It appears the input is converted to an
            MS-Windows BSTR (in 'Little-endian' format).
        
            See https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp\
                /692a42a9-06ce-4394-b9bc-5d2a50440168
            for more info on BSTR.
        
            :param value: the sequence of bytes to convert
            :return: the converted value (as a sequence of bytes)
            \"\"\"
            encoded_bytes = bytes(chain.from_iterable(zip(value, repeat(0))))
            return struct.pack('<i', len(encoded_bytes)) + encoded_bytes
        
        # Azure credentials
        client_id = '635d8b8a-9ac3-47e8-82ce-4867e37a8918'
        tenant_id = '251c4782-827b-4033-b7b5-12500263871f'
        sql_server = 'emi-qa-numberstation-we-svm.database.windows.net' 
        database = 'GenAIStatistics'
        
        # Authenticate using Azure Identity
        credential = DefaultAzureCredential(managed_identity_client_id=client_id)
        
        # Get Access Token for Azure SQL
        token = credential.get_token('https://database.windows.net/.default').token
        
        # Connection string
        conn_str = (
            f'DRIVER={{ODBC Driver 17 for SQL Server}};'
            f'SERVER={sql_server};DATABASE={database};'
            'Encrypt=yes;TrustServerCertificate=no;')
        
        try:
            exptoken = ''
            for i in token:
                exptoken += i
                exptoken += chr(0)
            tokenstruct = bytes2mswin_bstr(token.encode())
            # Connect to Azure SQL using the access token
            conn = pyodbc.connect(conn_str, attrs_before={1256: tokenstruct})
            cursor = conn.cursor()
            print('Connected to Azure SQL Database!')
        
            # Execute query
            cursor.execute('SELECT top 10 * FROM dbo.MarketSize')
            for row in cursor.fetchall():
                print(row)
        
            cursor.close()
            conn.close()
        except Exception as e:
            print(f'Error: {e}')
        "
