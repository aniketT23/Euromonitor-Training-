name: Azure SQL Query Runner
on: [workflow_dispatch]

env:
  SQL_SERVER: emi-qa-passportai-we-svm.database.windows.net
  DATABASE_NAME: GenAiStatistics
  SQL_QUERY: "SELECT TOP 10 * FROM dbo.MarketSize"

jobs:
  query-database:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Run az commands '
      run: |
          az account show
          az group list
          
    - name: Install ODBC Driver
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft*.list
        sudo rm -f /usr/share/keyrings/microsoft*.gpg
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/22.04/prod jammy main" | sudo tee /etc/apt/sources.list.d/mssql-release.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev

    - name: Setup Python
      run: |
        python -m pip install --upgrade pip
        pip install pyodbc pandas
        pip install msal

    - name: Get Access Token
      run: |
        TOKEN=$(az account get-access-token --resource emi-qa-passportai-we-svm.database.windows.net --query accessToken -o tsv)
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Execute Query
      run: |
        python3 -c "
        import pyodbc
        import msal
 
        # Azure AD Configuration
        TENANT_ID = ${{ secrets.AZURE_TENANT_ID }}
        CLIENT_ID = ${{ secrets.AZURE_CLIENT_ID }}
        SQL_SERVER = "emi-qa-passportai-we-svm.database.windows.net"
        DATABASE = "GenAiStatistics"
        AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
        SCOPE = ["https://database.windows.net//.default"]
 
        # Get Access Token via OIDC (Device Code Flow)
        def get_access_token():
        app = msal.PublicClientApplication(CLIENT_ID, authority=AUTHORITY)
        flow = app.initiate_device_flow(scopes=SCOPE)
 
        if "message" in flow:
              print(flow["message"])  # Prompt user to authenticate using device code
        else:
              raise Exception("Device Flow authentication failed")
 
        token_response = app.acquire_token_by_device_flow(flow)
        if "access_token" in token_response:
            return token_response["access_token"]
        else:
        raise Exception(f"Could not acquire token: {token_response.get('error_description', token_response)}")
 
        # Connect to Azure SQL Server
        def connect_to_azure_sql():
          access_token = get_access_token()
 
          connection_string = f"""
            DRIVER={{ODBC Driver 17 for SQL Server}};
            SERVER={SQL_SERVER};
            DATABASE={DATABASE};
            Authentication=ActiveDirectoryAccessToken;
          """
 
        conn = pyodbc.connect(connection_string, attrs_before={"AccessToken": access_token})
        return conn
 
        # Execute a test query
        try:
            conn = connect_to_azure_sql()
            cursor = conn.cursor()
            cursor.execute("SELECT TOP 10 * FROM dbo.MarketSize")  # Test query
            print("Connected successfully! Current DB time:", cursor.fetchone()[0])
            conn.close()
        except Exception as e:
            print("Connection failed:", e)
        "

    - name: Upload Results
      uses: actions/upload-artifact@v4
      with:
        name: sql-results
        path: results.csv
